<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为何截然不同——AT&amp;T和IBM</title>
      <link href="/Daffofily.github.io/2023/07/23/%E6%88%AA%E7%84%B6%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E2%80%94%E2%80%94AT-T%E5%92%8CIBM/"/>
      <url>/Daffofily.github.io/2023/07/23/%E6%88%AA%E7%84%B6%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E2%80%94%E2%80%94AT-T%E5%92%8CIBM/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a133df06ee601d6743a5db959a8988e2fae05cbbc1d80b692e86898841e78d55"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">此文章为私密内容，请咨询站主以获取查看权限哦！</span>      </label>    </div>  </div></div><script data-pjax src="/Daffofily.github.io/lib/hbe.js"></script><link href="/Daffofily.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 书评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《浪潮之巅》 </tag>
            
            <tag> AT&amp;T与IBM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>titanic prediction</title>
      <link href="/Daffofily.github.io/2023/07/19/titanic_prediction/"/>
      <url>/Daffofily.github.io/2023/07/19/titanic_prediction/</url>
      
        <content type="html"><![CDATA[<h1 id="Titanic数据预测"><a href="#Titanic数据预测" class="headerlink" title="Titanic数据预测"></a>Titanic数据预测</h1><p>这是我在Kaggle上完成的第一篇机器学习的实践内容，内容为预测泰坦尼克号上人员存活情况，参考<a href="https://www.kaggle.com/code/startupsci/titanic-data-science-solutions">此篇文章</a>所写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token comment"># machine learning</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC<span class="token punctuation">,</span>LinearSVC<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> GaussianNB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><ul><li>在python中的pandas库能够帮我们较为方便地操作数据。我们首先可以利用pandas将数据加载到DataFrame中。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/train.csv'</span><span class="token punctuation">)</span>test_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/test.csv'</span><span class="token punctuation">)</span>combine<span class="token operator">=</span><span class="token punctuation">[</span>train_df<span class="token punctuation">,</span> test_df<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="通过描述数据集地内容来进行分析"><a href="#通过描述数据集地内容来进行分析" class="headerlink" title="通过描述数据集地内容来进行分析"></a>通过描述数据集地内容来进行分析</h3><p><strong>1. 数据提供了哪些特征？</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>train_df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[&#39;PassengerId&#39; &#39;Survived&#39; &#39;Pclass&#39; &#39;Name&#39; &#39;Sex&#39; &#39;Age&#39; &#39;SibSp&#39; &#39;Parch&#39; &#39;Ticket&#39; &#39;Fare&#39; &#39;Cabin&#39; &#39;Embarked&#39;]</code></pre><p><strong>2. 哪些特征是类别性的？</strong></p><ul><li>Categorical: Survived, Sex, Embarked. Ordinal: Pclass</li></ul><p> <strong>3. 那些特征是数值型的？</strong></p><ul><li>Continous: Age, Fare. Discrete: Sibsp, Parch</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 预览数据</span>train_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table></div><p><strong>4. 哪些特征是混合数据类型的？</strong></p><ul><li>Ticket,Cabin是字母数字混合类型</li></ul><p><strong>5. 哪些特征可能包含错误？</strong></p><ul><li>名称中可能包含拼写错误，或者一些代替符号等。</li></ul><p><strong>6. 哪些特征包含空值，null？</strong></p><ul><li>Cabin&gt;Age&gt;Embarked, 在训练集中这些特征中含有空值</li><li>Cabin&gt;age，在测试集中这些特征包含空值</li></ul><p><strong>7. 各种特征的数据类型？</strong></p><ul><li><p>训练集七个特征是整型或浮点型，测试集中只有六个</p></li><li><p>五个特征是字符串型</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'_'</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span>test_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   PassengerId  891 non-null    int64   1   Survived     891 non-null    int64   2   Pclass       891 non-null    int64   3   Name         891 non-null    object  4   Sex          891 non-null    object  5   Age          714 non-null    float64 6   SibSp        891 non-null    int64   7   Parch        891 non-null    int64   8   Ticket       891 non-null    object  9   Fare         891 non-null    float64 10  Cabin        204 non-null    object  11  Embarked     889 non-null    object dtypes: float64(2), int64(5), object(5)memory usage: 83.7+ KB________________________________________&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 418 entries, 0 to 417Data columns (total 11 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   PassengerId  418 non-null    int64   1   Pclass       418 non-null    int64   2   Name         418 non-null    object  3   Sex          418 non-null    object  4   Age          332 non-null    float64 5   SibSp        418 non-null    int64   6   Parch        418 non-null    int64   7   Ticket       418 non-null    object  8   Fare         417 non-null    float64 9   Cabin        91 non-null     object  10  Embarked     418 non-null    object dtypes: float64(2), int64(4), object(5)memory usage: 36.0+ KB</code></pre><p><strong>8.样本中的数值特征的分布如何？</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>714.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>    </tr>    <tr>      <th>mean</th>      <td>446.000000</td>      <td>0.383838</td>      <td>2.308642</td>      <td>29.699118</td>      <td>0.523008</td>      <td>0.381594</td>      <td>32.204208</td>    </tr>    <tr>      <th>std</th>      <td>257.353842</td>      <td>0.486592</td>      <td>0.836071</td>      <td>14.526497</td>      <td>1.102743</td>      <td>0.806057</td>      <td>49.693429</td>    </tr>    <tr>      <th>min</th>      <td>1.000000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.420000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>223.500000</td>      <td>0.000000</td>      <td>2.000000</td>      <td>20.125000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>7.910400</td>    </tr>    <tr>      <th>50%</th>      <td>446.000000</td>      <td>0.000000</td>      <td>3.000000</td>      <td>28.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>14.454200</td>    </tr>    <tr>      <th>75%</th>      <td>668.500000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>38.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>31.000000</td>    </tr>    <tr>      <th>max</th>      <td>891.000000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>80.000000</td>      <td>8.000000</td>      <td>6.000000</td>      <td>512.329200</td>    </tr>  </tbody></table></div><p><strong>9.样本中的类别型特征分布如何？</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Name</th>      <th>Sex</th>      <th>Ticket</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>891</td>      <td>891</td>      <td>891</td>      <td>204</td>      <td>889</td>    </tr>    <tr>      <th>unique</th>      <td>891</td>      <td>2</td>      <td>681</td>      <td>147</td>      <td>3</td>    </tr>    <tr>      <th>top</th>      <td>Levy, Mr. Rene Jacques</td>      <td>male</td>      <td>347082</td>      <td>C23 C25 C27</td>      <td>S</td>    </tr>    <tr>      <th>freq</th>      <td>1</td>      <td>577</td>      <td>7</td>      <td>4</td>      <td>644</td>    </tr>  </tbody></table></div><h3 id="两两特征透视分析"><a href="#两两特征透视分析" class="headerlink" title="两两特征透视分析"></a>两两特征透视分析</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Pclass'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span>          <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Pclass'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span>                                                        ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Pclass</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0.629630</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>0.472826</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>0.242363</td>    </tr>  </tbody></table></div><p><font color="#808080">这里通过groupby函数按照Pcalss分类，然后求每类的Survived均值，最后利用sort_values函数排序</font></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span>          <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span>                                                        ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Sex</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>female</td>      <td>0.742038</td>    </tr>    <tr>      <th>1</th>      <td>male</td>      <td>0.188908</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'SibSp'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span>          <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'SibSp'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span>                                                        ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>SibSp</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>1</td>      <td>0.535885</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>0.464286</td>    </tr>    <tr>      <th>0</th>      <td>0</td>      <td>0.345395</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>0.250000</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>0.166667</td>    </tr>    <tr>      <th>5</th>      <td>5</td>      <td>0.000000</td>    </tr>    <tr>      <th>6</th>      <td>8</td>      <td>0.000000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Parch'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span>          <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Parch'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span>                                                        ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Parch</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>3</td>      <td>0.600000</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0.550847</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>0.500000</td>    </tr>    <tr>      <th>0</th>      <td>0</td>      <td>0.343658</td>    </tr>    <tr>      <th>5</th>      <td>5</td>      <td>0.200000</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>0.000000</td>    </tr>    <tr>      <th>6</th>      <td>6</td>      <td>0.000000</td>    </tr>  </tbody></table></div><h3 id="通过可视化数据进行分析"><a href="#通过可视化数据进行分析" class="headerlink" title="通过可视化数据进行分析"></a>通过可视化数据进行分析</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">grid <span class="token operator">=</span> sns<span class="token punctuation">.</span>FacetGrid<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span>                     row<span class="token operator">=</span><span class="token string">'Pclass'</span><span class="token punctuation">,</span>                     col<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span>                     hue<span class="token operator">=</span><span class="token string">'Sex'</span><span class="token punctuation">,</span>                     palette<span class="token operator">=</span><span class="token string">'seismic'</span><span class="token punctuation">)</span>grid<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">,</span> <span class="token string">'Embarked'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>grid<span class="token punctuation">.</span>add_legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Daffofily.github.io/2023/07/19/titanic_prediction/output_26_2.png" alt="png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grid <span class="token operator">=</span> sns<span class="token punctuation">.</span>FacetGrid<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span> hue<span class="token operator">=</span><span class="token string">'Sex'</span><span class="token punctuation">,</span> palette<span class="token operator">=</span><span class="token string">'seismic'</span><span class="token punctuation">)</span>grid<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>sns<span class="token punctuation">.</span>histplot<span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/Daffofily.github.io/2023/07/19/titanic_prediction/output_27_1.png" alt="png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grid <span class="token operator">=</span> sns<span class="token punctuation">.</span>FacetGrid<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span>row<span class="token operator">=</span><span class="token string">'Pclass'</span><span class="token punctuation">,</span>palette<span class="token operator">=</span><span class="token string">'seismic'</span><span class="token punctuation">)</span>grid<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>sns<span class="token punctuation">.</span>histplot<span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment"># sns.countplot(x='Survived', hue='Sex',data=train_df)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/Daffofily.github.io/2023/07/19/titanic_prediction/output_28_1.png" alt="png"></p><p><strong>类别数据间的可视化</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grid <span class="token operator">=</span> sns<span class="token punctuation">.</span>FacetGrid<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> row<span class="token operator">=</span><span class="token string">'Embarked'</span><span class="token punctuation">,</span> aspect<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>grid<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>sns<span class="token punctuation">.</span>pointplot<span class="token punctuation">,</span> <span class="token string">"Pclass"</span><span class="token punctuation">,</span> <span class="token string">"Survived"</span><span class="token punctuation">,</span> <span class="token string">"Sex"</span><span class="token punctuation">,</span> palette<span class="token operator">=</span><span class="token string">'deep'</span><span class="token punctuation">)</span>grid<span class="token punctuation">.</span>add_legend<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/Daffofily.github.io/2023/07/19/titanic_prediction/output_30_2.png" alt="png"></p><p><strong>类别数据与数值数据间的可视化</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grid <span class="token operator">=</span> sns<span class="token punctuation">.</span>FacetGrid<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span>                     row<span class="token operator">=</span><span class="token string">'Embarked'</span><span class="token punctuation">,</span>                     col<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span>                     height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                     aspect<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span>grid<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>sns<span class="token punctuation">.</span>barplot<span class="token punctuation">,</span> <span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token string">'Fare'</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/Daffofily.github.io/2023/07/19/titanic_prediction/output_32_2.png" alt="png"></p><p><strong>上面一共是四个不同类型的可视化方法</strong></p><ul><li>countplot：这是一种创建计数柱状图的函数，纵轴表示对应类别的观测数，每个柱子的颜色可以根据不同类型进行区分。</li><li>histplot：这是一种创建直方图的函数，可以将数据分为多个连续区间，并且计算每个区间的评述或者概率.</li><li>pointplot：这是一种绘制线状图的函数,可以表示类别数据与数值数据间的关系，对对应类别的数值数据取均值</li><li>barplot：这是一种给绘制柱状图的方法，作用与pointplot类似。</li></ul><h3 id="整理数据"><a href="#整理数据" class="headerlink" title="整理数据"></a>整理数据</h3><p><strong>筛选特征</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After dropping"</span><span class="token punctuation">,</span> train_df<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> test_df<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> combine<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">,</span> combine<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>train_df<span class="token operator">=</span>train_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span> <span class="token string">'Cabin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>test_df<span class="token operator">=</span>test_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ticket'</span><span class="token punctuation">,</span> <span class="token string">'Cabin'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>combine<span class="token operator">=</span><span class="token punctuation">[</span>train_df<span class="token punctuation">,</span> test_df<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After dropping"</span><span class="token punctuation">,</span> train_df<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> test_df<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> combine<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">,</span> combine<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>After dropping (891, 12) (418, 11) (891, 12) (418, 11)After dropping (891, 10) (418, 9) (891, 10) (418, 9)</code></pre><p><strong>新特征替换旧特征</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dataset<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token string">'([A-Za-z]+)\.'</span><span class="token punctuation">,</span> expand<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> train_df<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#crosstab函数是用来创建交叉表，它统计不同分类变量的频数或者频率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Sex</th>      <th>female</th>      <th>male</th>    </tr>    <tr>      <th>Title</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Capt</th>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>Col</th>      <td>0</td>      <td>2</td>    </tr>    <tr>      <th>Countess</th>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>Don</th>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>Dr</th>      <td>1</td>      <td>6</td>    </tr>    <tr>      <th>Jonkheer</th>      <td>0</td>      <td>1</td>    </tr>    <tr>      <th>Lady</th>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>Major</th>      <td>0</td>      <td>2</td>    </tr>    <tr>      <th>Master</th>      <td>0</td>      <td>40</td>    </tr>    <tr>      <th>Miss</th>      <td>182</td>      <td>0</td>    </tr>    <tr>      <th>Mlle</th>      <td>2</td>      <td>0</td>    </tr>    <tr>      <th>Mme</th>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>Mr</th>      <td>0</td>      <td>517</td>    </tr>    <tr>      <th>Mrs</th>      <td>125</td>      <td>0</td>    </tr>    <tr>      <th>Ms</th>      <td>1</td>      <td>0</td>    </tr>    <tr>      <th>Rev</th>      <td>0</td>      <td>6</td>    </tr>    <tr>      <th>Sir</th>      <td>0</td>      <td>1</td>    </tr>  </tbody></table></div><p>从上面的表格中可以看到Master、Miss、Mr和Mrs四种称呼所占比例最多，将其他的称号合并为一个。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">'Capt'</span><span class="token punctuation">,</span> <span class="token string">'Col'</span><span class="token punctuation">,</span> <span class="token string">'Countess'</span><span class="token punctuation">,</span> <span class="token string">'Don'</span><span class="token punctuation">,</span> <span class="token string">'Dr'</span><span class="token punctuation">,</span> <span class="token string">'Jonkheer'</span><span class="token punctuation">,</span> <span class="token string">'Lady'</span><span class="token punctuation">,</span> <span class="token string">'Major'</span><span class="token punctuation">,</span>        <span class="token string">'Rev'</span><span class="token punctuation">,</span> <span class="token string">'Sir'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Rare'</span><span class="token punctuation">)</span>    dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Mlle'</span><span class="token punctuation">,</span> <span class="token string">'Miss'</span><span class="token punctuation">)</span>    dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Ms'</span><span class="token punctuation">,</span> <span class="token string">'Miss'</span><span class="token punctuation">)</span>    dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Mme'</span><span class="token punctuation">,</span> <span class="token string">'Mr'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> train_df<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Sex</th>      <th>female</th>      <th>male</th>    </tr>    <tr>      <th>Title</th>      <th></th>      <th></th>    </tr>  </thead>  <tbody>    <tr>      <th>Master</th>      <td>0</td>      <td>40</td>    </tr>    <tr>      <th>Miss</th>      <td>185</td>      <td>0</td>    </tr>    <tr>      <th>Mr</th>      <td>1</td>      <td>517</td>    </tr>    <tr>      <th>Mrs</th>      <td>125</td>      <td>0</td>    </tr>    <tr>      <th>Rare</th>      <td>3</td>      <td>20</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Title</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Master</td>      <td>0.575000</td>    </tr>    <tr>      <th>1</th>      <td>Miss</td>      <td>0.702703</td>    </tr>    <tr>      <th>2</th>      <td>Mr</td>      <td>0.158301</td>    </tr>    <tr>      <th>3</th>      <td>Mrs</td>      <td>0.792000</td>    </tr>    <tr>      <th>4</th>      <td>Rare</td>      <td>0.347826</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">title_mapping<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"Master"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Miss"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"Mr"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"Mrs"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"Rare"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token operator">=</span>dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>title_mapping<span class="token punctuation">)</span>    dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token operator">=</span>dataset<span class="token punctuation">[</span><span class="token string">'Title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>train_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>      <th>Title</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>      <td>4</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>      <td>3</td>    </tr>  </tbody></table></div><p><strong>丢弃特征</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 丢弃掉Name和PassengerId两个特征</span>train_df<span class="token operator">=</span>train_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">,</span> <span class="token string">'PassengerId'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>test_df<span class="token operator">=</span>test_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">combine<span class="token operator">=</span><span class="token punctuation">[</span>train_df<span class="token punctuation">,</span> test_df<span class="token punctuation">]</span>train_df<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>test_df<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>((891, 9), (418, 9))</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>      <th>Title</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>      <td>4</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>3</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>      <td>3</td>    </tr>  </tbody></table></div><p><strong>将类别特征转换为数值特征</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token operator">=</span>dataset<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"male"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"female"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 这里使用字典实现快速对表中的值进行替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>      <th>Title</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>3</td>      <td>1</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>2</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>      <td>4</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>2</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>2</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>3</td>      <td>1</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>      <td>3</td>    </tr>  </tbody></table></div><p><strong>填补Age空缺</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">grid<span class="token operator">=</span>sns<span class="token punctuation">.</span>FacetGrid<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> row<span class="token operator">=</span><span class="token string">'Sex'</span><span class="token punctuation">,</span> col<span class="token operator">=</span><span class="token string">'Pclass'</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>grid<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>sns<span class="token punctuation">.</span>histplot<span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/Daffofily.github.io/2023/07/19/titanic_prediction/output_52_1.png" alt="png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 9 columns): #   Column    Non-Null Count  Dtype  ---  ------    --------------  -----   0   Survived  891 non-null    int64   1   Pclass    891 non-null    int64   2   Sex       891 non-null    int64   3   Age       714 non-null    float64 4   SibSp     891 non-null    int64   5   Parch     891 non-null    int64   6   Fare      891 non-null    float64 7   Embarked  889 non-null    object  8   Title     891 non-null    int64  dtypes: float64(2), int64(6), object(1)memory usage: 62.8+ KB</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这里使用Sex和Pclass两个属性来判断空缺年龄的值并填补</span>filled_age <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ages <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span>                           <span class="token operator">&amp;</span> <span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'Pclass'</span><span class="token punctuation">]</span> <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>            filled_age<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ages<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>Sex <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>Pclass <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>                        <span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>Age<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> filled_age<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>                                                                    j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    dataset<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 9 columns): #   Column    Non-Null Count  Dtype  ---  ------    --------------  -----   0   Survived  891 non-null    int64   1   Pclass    891 non-null    int64   2   Sex       891 non-null    int64   3   Age       891 non-null    int32   4   SibSp     891 non-null    int64   5   Parch     891 non-null    int64   6   Fare      891 non-null    float64 7   Embarked  889 non-null    object  8   Title     891 non-null    int64  dtypes: float64(1), int32(1), int64(6), object(1)memory usage: 59.3+ KB</code></pre><p><strong>创建年龄段</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将年龄分为五段</span>train_df<span class="token punctuation">[</span><span class="token string">'Age_band'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Age_band'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span>          <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Age_band'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'Age_band'</span><span class="token punctuation">,</span>                                                        ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Age_band</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>(-0.08, 16.0]</td>      <td>0.550000</td>    </tr>    <tr>      <th>1</th>      <td>(16.0, 32.0]</td>      <td>0.337374</td>    </tr>    <tr>      <th>2</th>      <td>(32.0, 48.0]</td>      <td>0.412037</td>    </tr>    <tr>      <th>3</th>      <td>(48.0, 64.0]</td>      <td>0.434783</td>    </tr>    <tr>      <th>4</th>      <td>(64.0, 80.0]</td>      <td>0.090909</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>dataset<span class="token punctuation">.</span>Age <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>Age <span class="token operator">&lt;=</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>Age <span class="token operator">&lt;=</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>Age <span class="token operator">&lt;=</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>    dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>dataset<span class="token punctuation">.</span>Age <span class="token operator">></span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>train_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>      <th>Title</th>      <th>Age_band</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>3</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>      <td>3</td>      <td>(16.0, 32.0]</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>      <td>4</td>      <td>(32.0, 48.0]</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>      <td>2</td>      <td>(16.0, 32.0]</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>      <td>4</td>      <td>(32.0, 48.0]</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>3</td>      <td>1</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>      <td>3</td>      <td>(32.0, 48.0]</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df <span class="token operator">=</span> train_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Age_band'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>combine <span class="token operator">=</span> <span class="token punctuation">[</span>train_df<span class="token punctuation">,</span> test_df<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>      <th>Embarked</th>      <th>Title</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>3</td>      <td>1</td>      <td>1</td>      <td>1</td>      <td>0</td>      <td>7.2500</td>      <td>S</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>71.2833</td>      <td>C</td>      <td>4</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>0</td>      <td>7.9250</td>      <td>S</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>2</td>      <td>2</td>      <td>1</td>      <td>0</td>      <td>53.1000</td>      <td>S</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>3</td>      <td>1</td>      <td>2</td>      <td>0</td>      <td>0</td>      <td>8.0500</td>      <td>S</td>      <td>3</td>    </tr>  </tbody></table></div><p><strong>合并特征</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">[</span><span class="token string">'Familymember'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token string">'SibSp'</span><span class="token punctuation">]</span> <span class="token operator">+</span> dataset<span class="token punctuation">[</span><span class="token string">'Parch'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Familymember'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span>          <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Familymember'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                     as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span>                                                        ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Familymember</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>4</td>      <td>0.724138</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>0.578431</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>0.552795</td>    </tr>    <tr>      <th>6</th>      <td>7</td>      <td>0.333333</td>    </tr>    <tr>      <th>0</th>      <td>1</td>      <td>0.303538</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0.200000</td>    </tr>    <tr>      <th>5</th>      <td>6</td>      <td>0.136364</td>    </tr>    <tr>      <th>7</th>      <td>8</td>      <td>0.000000</td>    </tr>    <tr>      <th>8</th>      <td>11</td>      <td>0.000000</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">[</span><span class="token string">'isAlone'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'Familymember'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'isAlone'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'isAlone'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'isAlone'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>isAlone</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0.505650</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>0.303538</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">combine <span class="token operator">=</span> <span class="token punctuation">[</span>train_df<span class="token punctuation">,</span> test_df<span class="token punctuation">]</span><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'SibSp'</span><span class="token punctuation">,</span> <span class="token string">'Parch'</span><span class="token punctuation">,</span> <span class="token string">'Familymember'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>train_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># train_df=train_df.drop(['SibSp', 'Parch', 'Familymember'], axis=1)</span><span class="token comment"># train_df.head()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>Fare</th>      <th>Embarked</th>      <th>Title</th>      <th>isAlone</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>3</td>      <td>1</td>      <td>1</td>      <td>7.2500</td>      <td>S</td>      <td>3</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>2</td>      <td>2</td>      <td>71.2833</td>      <td>C</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>7.9250</td>      <td>S</td>      <td>2</td>      <td>1</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>2</td>      <td>2</td>      <td>53.1000</td>      <td>S</td>      <td>4</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>3</td>      <td>1</td>      <td>2</td>      <td>8.0500</td>      <td>S</td>      <td>3</td>      <td>1</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">sns<span class="token punctuation">.</span>pointplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'Pclass'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'Age'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>train_df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/Daffofily.github.io/2023/07/19/titanic_prediction/output_65_1.png" alt="png"></p><p><strong>创建Age*Pclass联合特征</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">[</span><span class="token string">'Age*Pclass'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dataset<span class="token punctuation">.</span>Age <span class="token operator">*</span> dataset<span class="token punctuation">.</span>Pclasstrain_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">,</span> <span class="token string">'Pclass'</span><span class="token punctuation">,</span> <span class="token string">'Age*Pclass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Age</th>      <th>Pclass</th>      <th>Age*Pclass</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>3</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>2</td>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>2</td>      <td>3</td>      <td>6</td>    </tr>    <tr>      <th>5</th>      <td>1</td>      <td>3</td>      <td>3</td>    </tr>    <tr>      <th>6</th>      <td>3</td>      <td>1</td>      <td>3</td>    </tr>    <tr>      <th>7</th>      <td>0</td>      <td>3</td>      <td>0</td>    </tr>    <tr>      <th>8</th>      <td>1</td>      <td>3</td>      <td>3</td>    </tr>    <tr>      <th>9</th>      <td>0</td>      <td>2</td>      <td>0</td>    </tr>  </tbody></table></div><p><strong>填补Embarked的空缺值</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">freq_port<span class="token operator">=</span>train_df<span class="token punctuation">.</span>Embarked<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>freq_port<span class="token comment"># mode函数是用来寻找众数的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&#39;S&#39;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">[</span><span class="token string">'Embarked'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>freq_port<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Embarked'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span>          <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'Embarked'</span><span class="token punctuation">,</span>                     as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'Survived'</span><span class="token punctuation">,</span>                                                        ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Embarked</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>C</td>      <td>0.553571</td>    </tr>    <tr>      <th>1</th>      <td>Q</td>      <td>0.389610</td>    </tr>    <tr>      <th>2</th>      <td>S</td>      <td>0.339009</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>test_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 10 columns): #   Column      Non-Null Count  Dtype   ---  ------      --------------  -----    0   Survived    891 non-null    int64    1   Pclass      891 non-null    int64    2   Sex         891 non-null    int64    3   Age         891 non-null    int32    4   Fare        891 non-null    float64  5   Embarked    891 non-null    int64    6   Title       891 non-null    int64    7   isAlone     891 non-null    int64    8   Age*Pclass  891 non-null    int64    9   Fare_band   891 non-null    categorydtypes: category(1), float64(1), int32(1), int64(7)memory usage: 60.4 KB&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 418 entries, 0 to 417Data columns (total 9 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   PassengerId  418 non-null    int64   1   Pclass       418 non-null    int64   2   Sex          418 non-null    int64   3   Age          418 non-null    int32   4   Fare         417 non-null    float64 5   Embarked     418 non-null    int64   6   Title        418 non-null    float64 7   isAlone      418 non-null    int64   8   Age*Pclass   418 non-null    int64  dtypes: float64(2), int32(1), int64(6)memory usage: 27.9 KB(None, None)</code></pre><p><strong>将Embarked转为数值特征</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">[</span><span class="token string">'Embarked'</span><span class="token punctuation">]</span><span class="token operator">=</span>dataset<span class="token punctuation">[</span><span class="token string">'Embarked'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'S'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Q'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>train_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Survived</th>      <th>Pclass</th>      <th>Sex</th>      <th>Age</th>      <th>Fare</th>      <th>Embarked</th>      <th>Title</th>      <th>isAlone</th>      <th>Age*Pclass</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>3</td>      <td>1</td>      <td>1</td>      <td>7.2500</td>      <td>0</td>      <td>3</td>      <td>0</td>      <td>3</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>1</td>      <td>2</td>      <td>2</td>      <td>71.2833</td>      <td>1</td>      <td>4</td>      <td>0</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>1</td>      <td>3</td>      <td>2</td>      <td>1</td>      <td>7.9250</td>      <td>0</td>      <td>2</td>      <td>1</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>1</td>      <td>1</td>      <td>2</td>      <td>2</td>      <td>53.1000</td>      <td>0</td>      <td>4</td>      <td>0</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td>0</td>      <td>3</td>      <td>1</td>      <td>2</td>      <td>8.0500</td>      <td>0</td>      <td>3</td>      <td>1</td>      <td>6</td>    </tr>  </tbody></table></div><p><strong>创建Fare分段</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">[</span><span class="token string">'Fare_band'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Fare_band'</span><span class="token punctuation">,</span> <span class="token string">'Survived'</span>          <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'Fare_band'</span><span class="token punctuation">,</span>                     as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'Fare_band'</span><span class="token punctuation">,</span>                                                        ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 这里qcut和cut的区别是qcut分割每个区段数据个数相等，cut分割的每个区段间隔相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Fare_band</th>      <th>Survived</th>    </tr>  </thead>  <tbody>    <tr>      <th>3</th>      <td>(31.0, 512.329]</td>      <td>0.581081</td>    </tr>    <tr>      <th>2</th>      <td>(14.454, 31.0]</td>      <td>0.454955</td>    </tr>    <tr>      <th>1</th>      <td>(7.91, 14.454]</td>      <td>0.303571</td>    </tr>    <tr>      <th>0</th>      <td>(-0.001, 7.91]</td>      <td>0.197309</td>    </tr>  </tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 一行填补test_df空缺</span>test_df<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test_df<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 418 entries, 0 to 417Data columns (total 9 columns): #   Column       Non-Null Count  Dtype  ---  ------       --------------  -----   0   PassengerId  418 non-null    int64   1   Pclass       418 non-null    int64   2   Sex          418 non-null    int64   3   Age          418 non-null    int32   4   Fare         418 non-null    float64 5   Embarked     418 non-null    int64   6   Title        418 non-null    float64 7   isAlone      418 non-null    int64   8   Age*Pclass   418 non-null    int64  dtypes: float64(2), int32(1), int64(6)memory usage: 27.9 KB</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> dataset <span class="token keyword">in</span> combine<span class="token punctuation">:</span>    dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">7.91</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>    dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">7.91</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">14.454</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>    dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">14.454</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">31.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>    dataset<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">31.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Fare'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Fare_band'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>train_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>test_df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>(   Survived  Pclass  Sex  Age  Fare  Embarked  Title  isAlone  Age*Pclass 0         0       3    1    1   0.0         0      3        0           3 1         1       1    2    2   3.0         1      4        0           2 2         1       3    2    1   1.0         0      2        1           3 3         1       1    2    2   3.0         0      4        0           2 4         0       3    1    2   1.0         0      3        1           6 5         0       3    1    1   1.0         2      3        1           3 6         0       1    1    3   3.0         0      3        1           3 7         0       3    1    0   2.0         0      1        0           0 8         1       3    2    1   1.0         0      4        0           3 9         1       2    2    0   2.0         1      4        0           0,    PassengerId  Pclass  Sex  Age  Fare  Embarked  Title  isAlone  Age*Pclass 0          892       3    1    2   0.0         2    3.0        1           6 1          893       3    2    2   0.0         0    4.0        0           6 2          894       2    1    3   1.0         2    3.0        1           6 3          895       3    1    1   1.0         0    3.0        1           3 4          896       3    2    1   1.0         0    4.0        0           3 5          897       3    1    0   1.0         0    3.0        1           0 6          898       3    2    1   0.0         2    2.0        1           3 7          899       2    1    1   2.0         0    3.0        0           2 8          900       3    2    1   0.0         1    4.0        1           3 9          901       3    1    1   2.0         0    3.0        0           3)</code></pre><h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><p>使用以下这些方法来进行预测:</p><ul><li>Logistic Regression</li><li>KNN or k-Nearest Neighbors</li><li>Support Vector Machines</li><li>Naive Bayes classifier</li><li>Decision Tree</li><li>Random Forrest</li><li>Perceptron</li><li>icial neural network</li><li>RVM or Relevance Vector Machine</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">X_train <span class="token operator">=</span> train_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Survived'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>Y_train <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'Survived'</span><span class="token punctuation">]</span>X_test <span class="token operator">=</span> test_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PassengerId'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> Y_train<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> X_test<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>((891, 8), (891,), (418, 8))</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Logistic Regression</span>logreg <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>logreg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span>Y_pred <span class="token operator">=</span> logreg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>acc_log <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>logreg<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>acc_log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>79.46</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Linear SVC</span>linear_svc <span class="token operator">=</span> LinearSVC<span class="token punctuation">(</span><span class="token punctuation">)</span>linear_svc<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span>Y_pred <span class="token operator">=</span> linear_svc<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>acc_linear_svc <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>linear_svc<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>acc_linear_svc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>C:\Users\wangk\anaconda3\envs\pytorch\lib\site-packages\sklearn\svm\_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.  warnings.warn(79.24</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Random Forest</span>random_forest <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>random_forest<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span>Y_pred <span class="token operator">=</span> random_forest<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>random_forest<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span>acc_random_forest <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>random_forest<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>acc_random_forest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>86.64</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># KMeans</span>knn<span class="token operator">=</span>KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>Y_train<span class="token punctuation">)</span>Y_pred<span class="token operator">=</span>knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>acc_knn<span class="token operator">=</span><span class="token builtin">round</span><span class="token punctuation">(</span>knn<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>Y_train<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>acc_knn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>83.95</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Gaussian Naive Bayes</span>gaussian <span class="token operator">=</span> GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span>gaussian<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span>Y_pred <span class="token operator">=</span> gaussian<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>acc_gaussian <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>gaussian<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>acc_gaussian<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>77.22</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kaggle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown学习笔记</title>
      <link href="/Daffofily.github.io/2022/10/10/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/Daffofily.github.io/2022/10/10/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown学习笔记"><a href="#Markdown学习笔记" class="headerlink" title="Markdown学习笔记"></a>Markdown学习笔记</h1><p>Hello,欢迎您来到我的第一篇博客文章,这是我的第一篇博客,记录的是我学习markdown过程中的笔记和练习.此文章借鉴CSDN博主<a href="https://blog.csdn.net/witnessai1">witnessai1</a>所写,目的仅是练习Markdown语法,在此向witnessai1博主致谢.此博客尚未完结,剩余部分我随着自己的学习进度会继续补充.因笔者仅为初学,故此博客仅供交流借鉴,其中不乏谬误,还望各位读者指正!!!</p><p>[toc]</p><h2 id="xxxxxxxxxx-hexo-new-“My-New-Post”bash"><a href="#xxxxxxxxxx-hexo-new-“My-New-Post”bash" class="headerlink" title="xxxxxxxxxx $ hexo new “My New Post”bash"></a>xxxxxxxxxx $ hexo new “My New Post”bash</h2><p>代码: </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">斜体</span><span class="token punctuation">*</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content">粗体</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">加粗斜体</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span class="token strike"><span class="token punctuation">~~</span><span class="token content">删除线</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：<br><em>斜体</em><br><strong>粗体</strong><br><em><strong>加粗斜体</strong></em><br><del>删除线</del></p><h2 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span>......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>各级标题字号依次递减<br>显示效果：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="3-超链接"><a href="#3-超链接" class="headerlink" title="3. 超链接"></a>3. 超链接</h2><h3 id="3-1-行列式"><a href="#3-1-行列式" class="headerlink" title="3.1. 行列式"></a>3.1. 行列式</h3><p>语法说明：[]里面写链接文字，()里面写链接地址，””里面可写可不写，写上鼠标指向链接文字时会有悬浮文字<br>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">欢迎来到[Daffodily]的网站(https://daffodily.github.io/Daffofily.github.io/)欢迎来到[Daffodily]的网站(https://daffodily.github.io/Daffofily.github.io/ "我的github地址")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显示效果：<br>欢迎来到<a href="https://daffodily.github.io/Daffofily.github.io/">Daffodily</a>的个人网站<br>欢迎来到<a href="https://daffodily.github.io/Daffofily.github.io/%E7%9A%84%E7%BD%91%E7%AB%99" title="我的github地址">Daffodily</a>的个人网站<br><strong>!!注意此处()必须紧跟在[]后面!!</strong></p><h3 id="3-2-参考式"><a href="#3-2-参考式" class="headerlink" title="3.2. 参考式"></a>3.2. 参考式</h3><p>参考式链接一般在存在多次引用的情况下使用，实际上减少了代码量<br>语法说明：<br>参考式链接有两个部分，一个是在文中，一个是在文末（当然也可以是其他地方）。文中的部分格式是[链接文字][链接符号]，文末的部分格式是：链接符号: 链接地址 “链接标题”<br>代码：</p><pre class="line-numbers language-none"><code class="language-none">本人学校的官网是[武汉大学][1]我的个人github地址是[Daffodily][2][1]: https:&#x2F;&#x2F;www.whu.edu.cn&#x2F; &quot;转到珞珈山职业技术学院&quot;[2]: https:&#x2F;&#x2F;daffodily.github.io&#x2F;Daffofily.github.io&#x2F; &quot;转到我的github&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：<br>本人学校的官网是<a href="https://www.whu.edu.cn/" title="转到珞珈山职业技术学院">武汉大学</a><br>我的个人github地址是<a href="https://daffodily.github.io/Daffofily.github.io/" title="转到我的github">Daffodily</a></p><h3 id="3-3-自动连接"><a href="#3-3-自动连接" class="headerlink" title="3.3. 自动连接"></a>3.3. 自动连接</h3><p>语法说明: Markdown支持自动将网址和电子邮箱地址转换为连接,只需要将其用&lt;&gt;包起来<br>代码:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&lt;https://www.csdn.net>&lt;2832762297@qq.com><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显示效果:<br><a href="https://www.csdn.net/">https://www.csdn.net</a><br><a href="mailto:&#50;&#56;&#x33;&#50;&#x37;&#x36;&#x32;&#x32;&#x39;&#x37;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;">&#50;&#56;&#x33;&#50;&#x37;&#x36;&#x32;&#x32;&#x39;&#x37;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a></p><h2 id="4-锚点"><a href="#4-锚点" class="headerlink" title="4. 锚点"></a>4. 锚点</h2><p>锚点其实是页内超链接，可以跳转到本页面的某个位置。</p><p>语法：<br>在需要跳转的地方后面写上(#标记)，在需要跳转到的地方后面写上</p><p>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 目录&#123;#index&#125;</span>跳转到目录(#目录)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><p>跳转到<a href="#index">目录</a></p><h2 id="5-列表"><a href="#5-列表" class="headerlink" title="5. 列表"></a>5. 列表</h2><h3 id="5-1-无序列表"><a href="#5-1-无序列表" class="headerlink" title="5.1. 无序列表"></a>5.1. 无序列表</h3><p>使用*，+，- 表示无序列表<br>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 无序列表一<span class="token list punctuation">-</span> 无序列表二<span class="token list punctuation">+</span> 无序列表一<span class="token list punctuation">+</span> 无序列表二<span class="token list punctuation">*</span> 无序列表一<span class="token list punctuation">*</span> 无序列表二<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><ul><li>无序列表一</li><li>无序列表二</li></ul><ul><li>无序列表一</li><li>无序列表二</li></ul><ul><li>无序列表一</li><li>无序列表二</li></ul><h3 id="5-2-有序列表"><a href="#5-2-有序列表" class="headerlink" title="5.2. 有序列表"></a>5.2. 有序列表</h3><p>有序列表用数字加一个小数点表示<br>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 有序列表<span class="token list punctuation">2.</span> 有序列表<span class="token list punctuation">3.</span> 有序列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><h3 id="5-3-定义型列表"><a href="#5-3-定义型列表" class="headerlink" title="5.3. 定义型列表"></a>5.3. 定义型列表</h3><p>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Markdown    轻量级文本标记语言，可以转换成html，pdf等格式（四个不可见的空格）代码块 2这是代码块的定义（左侧有一个制表符）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：<br>Markdown<br>    轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）<br>代码块<br>    这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p><h3 id="5-4-列表缩进"><a href="#5-4-列表缩进" class="headerlink" title="5.4. 列表缩进"></a>5.4. 列表缩进</h3><p>在列表标记后跟上至少一个空格或者制表符</p><p>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span>  轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ <span class="token list punctuation">*</span>  那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ </p></li><li><p>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！<br>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</p></li></ul><h3 id="5-5-包含段落的列表"><a href="#5-5-包含段落的列表" class="headerlink" title="5.5. 包含段落的列表"></a>5.5. 包含段落的列表</h3><p>每个列表项目可以包含多个段落，每个项目下的段落应该缩进至少两个空格空格或是一个制表符<br>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！  那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ <span class="token list punctuation">*</span> 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><ul><li>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。</li></ul><p>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</p><p>  那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ </p><ul><li>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</li></ul><h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h2><p>在引用的文字前加上&gt;即可，可以支持多重引用<br>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">> ></span> 无意义的引用1<span class="token blockquote punctuation">></span> 无意义的引用2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><blockquote><blockquote><p>无意义的引用1</p></blockquote></blockquote><blockquote><p>无意义的引用2</p></blockquote><h2 id="7-插入图像"><a href="#7-插入图像" class="headerlink" title="7. 插入图像"></a>7. 插入图像</h2><h3 id="7-1-行内式"><a href="#7-1-行内式" class="headerlink" title="7.1. 行内式"></a>7.1. 行内式</h3><pre class="line-numbers language-none"><code class="language-none">语法格式：![图片Alt](图片地址 &quot;图片Title&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法说明：图片Alt的意思是如果图片不能显示，就用Alt来代替图片，Title同样是悬浮文字</p><p>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">我的主题：<span class="token url"><span class="token operator">!</span>[<span class="token content">我的主题</span>](<span class="token url">./images/0.jpg</span> <span class="token string">"我的主题"</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我的主题：<br><img src="/Daffofily.github.io/2022/10/10/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/0.jpg" alt="我的主题"></p><h3 id="7-2-参考式"><a href="#7-2-参考式" class="headerlink" title="7.2. 参考式"></a>7.2. 参考式</h3><p>语法说明：</p><p>在要插入的地方写![图片Alt][标记]</p><p>在文档后面写上[标记]: 图片地址 “Title”</p><p>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">我的主题<span class="token url"><span class="token operator">!</span>[<span class="token content">我的主题</span>][<span class="token variable">1</span>]</span><span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ../images/1.jpg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：<br>我的主题<br><img src="/Daffofily.github.io/2022/10/10/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1.jpg" alt="我的主题"></p><h2 id="8-内容目录"><a href="#8-内容目录" class="headerlink" title="8.内容目录"></a>8.内容目录</h2><p>在段落中写[TOC]可以显示目录，会自动将多级标题提取出来，并且分级，详细可以参见本文目录</p><h2 id="9-注脚"><a href="#9-注脚" class="headerlink" title="9.注脚"></a>9.注脚</h2><p>语法说明：</p><p>在需要注脚文字后面写上[^注脚名称]，然后在文本后面添加注脚。</p><p>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">使用 Markdown[^1]可以效率的书写文档[^1]:Markdown是一种纯文本标记语言<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 Markdown<a href="Markdown%E6%98%AF%E4%B8%80%E7%A7%8D%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">^1</a>可以效率的书写文档</p><h2 id="10-流程图"><a href="#10-流程图" class="headerlink" title="10.流程图"></a>10.流程图</h2><p>本文主要介绍Mermaid流程图<br>示例：</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TBA<span class="token text string">[Apple]</span><span class="token arrow operator">--></span>B<span class="token text string">&#123;Boy&#125;</span>A<span class="token arrow operator">---</span>C<span class="token text string">(Cat)</span>B.<span class="token arrow operator">-></span>E<span class="token text string">((Dog))</span>C<span class="token inter-arrow-label"><span class="token arrow-head arrow operator">==</span><span class="token label property">喵</span><span class="token arrow operator">==></span></span>E<span class="token keyword">style</span> A <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#2ff<span class="token punctuation">,</span><span class="token property">fill-opacity</span><span class="token operator">:</span>0.1<span class="token punctuation">,</span><span class="token property">stroke</span><span class="token operator">:</span>#faa<span class="token punctuation">,</span><span class="token property">stroke-width</span><span class="token operator">:</span>4px</span><span class="token keyword">style</span> E <span class="token style"><span class="token property">stroke</span><span class="token operator">:</span>#000<span class="token punctuation">,</span><span class="token property">stroke-width</span><span class="token operator">:</span>8px</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h3><pre class="line-numbers language-none"><code class="language-none">graph 方向节点定义以及节点连线(样式调整)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意此处必须具有完整的格式（至少前两行要写）</strong></p><h3 id="显示方向"><a href="#显示方向" class="headerlink" title="显示方向"></a>显示方向</h3><ul><li>TB&#x2F;TD 表示从上到下</li><li>BT 表示从下到上</li><li>RL 表示从右到左</li><li>LR 表示从左到右</li></ul><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><ul><li>默认节点： A</li><li>矩形节点： B[矩形]</li><li>圆角矩形节点： C(圆角矩形)</li><li>圆形节点： D((圆形))</li><li>非对称节点： E&gt;非对称]</li><li>菱形节点： F{菱形}</li></ul><p>节点连线</p><ul><li>箭头连接 A1–&gt;B1</li><li>开放连接 A2—B2</li><li>虚线箭头连接 A3.-&gt;B3 或者 A3-.-&gt;B3</li><li>虚线连接 A4.-B4 或者 A4-.-B4</li><li>粗线箭头连接 A5&#x3D;&#x3D;&gt;B5</li><li>粗线开放连接 A6&#x3D;&#x3D;&#x3D;B6</li><li>标虚线箭头连接 A7-.text.-&gt;B7 </li><li>标签开放连接 A8–text—B8<pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TBA1<span class="token arrow operator">--></span>B1A2<span class="token arrow operator">---</span>B2A3.<span class="token arrow operator">-></span>B3 A4.-B4 A5<span class="token arrow operator">==></span>B5A6<span class="token arrow operator">===</span>B6A7<span class="token inter-arrow-label"><span class="token arrow-head arrow operator">-.</span><span class="token label property">text</span><span class="token arrow operator">.-></span></span>B7A8<span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">text</span><span class="token arrow operator">---</span></span>B8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="11-表格"><a href="#11-表格" class="headerlink" title="11.表格"></a>11.表格</h2><p>语法说明：</p><ol><li>表格书写格式由三个部分组成，第一行为表头部分，第二行为分隔部分，第三行为主体部分</li><li>列与列之间用 | 分隔</li><li>分隔部分最后可以加上：指定对齐方式，默认为左对齐，加上为右对齐</li></ol><p>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">姓名|年龄|专业方向-|-|-宋嘉|20|地理信息工程于昊|20|摄影测量冯阳|21|空间信息与数字技术王困|20|地理信息工程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><table><thead><tr><th align="left">姓名</th><th>年龄</th><th align="left">专业方向</th></tr></thead><tbody><tr><td align="left">宋嘉</td><td>20</td><td align="left">地理信息工程</td></tr><tr><td align="left">于昊</td><td>20</td><td align="left">摄影测量</td></tr><tr><td align="left">冯阳</td><td>21</td><td align="left">空间信息与数字技术</td></tr><tr><td align="left">王困</td><td>20</td><td align="left">地理信息工程</td></tr></tbody></table><h2 id="12-分割线"><a href="#12-分割线" class="headerlink" title="12.分割线"></a>12.分割线</h2><p>可以用三个以上的 * 、+ 、- 建立一个分割线<br>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>+++<span class="token hr punctuation">***</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示效果：</p><hr><hr><p>+++</p><h2 id="13-代码"><a href="#13-代码" class="headerlink" title="13.代码"></a>13.代码</h2><h3 id="13-1-行内式"><a href="#13-1-行内式" class="headerlink" title="13.1. 行内式"></a>13.1. 行内式</h3><p>行内式一般用于插入一个单词或者一句代码的情况<br>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">C语言里的<span class="token code-snippet code keyword">`scanf()`</span>函数怎么使用？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示效果：</p><p>C语言里的<code>scanf()</code>函数怎么使用？</p><h3 id="13-2-缩进式多行代码"><a href="#13-2-缩进式多行代码" class="headerlink" title="13.2. 缩进式多行代码"></a>13.2. 缩进式多行代码</h3><p>缩进式一般用四个空格或者是一个制表符</p><p>代码：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>include&lt;iostream></span>using namespace std;void main()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：<br>    #include<iostream><br>    using namespace std;<br>    void main(){<br>    }</iostream></p><h3 id="13-3-用六个包裹多行代码"><a href="#13-3-用六个包裹多行代码" class="headerlink" title="13.3. 用六个包裹多行代码"></a>13.3. 用六个包裹多行代码</h3><p>用六个 &#96; 将代码部分包括起来<br>示例：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">from torch import nn <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于pytorch中数据读取介绍</title>
      <link href="/Daffofily.github.io/2022/10/10/%E5%85%B3%E4%BA%8Epytorch%E4%B8%ADDataLoader%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>/Daffofily.github.io/2022/10/10/%E5%85%B3%E4%BA%8Epytorch%E4%B8%ADDataLoader%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="关于pytorch中数据读取介绍"><a href="#关于pytorch中数据读取介绍" class="headerlink" title="关于pytorch中数据读取介绍"></a>关于pytorch中数据读取介绍</h1><ol><li><h3 id="什么是Dataset和DataLoader？"><a href="#什么是Dataset和DataLoader？" class="headerlink" title="什么是Dataset和DataLoader？"></a>什么是Dataset和DataLoader？</h3> torch.utils.data.Dataset是一个数据基类，我们可以继承和重写这个数据类，但必须定义_len_和_getitem_这两个函数。<br> DataLoader是pytorch中用来处理输入数据的工具类，组合了数据集（dataset）和采样器（sampler），并且在数据集上提供单线程或多线程的可迭代对象。在使用DataLoader加载数据前必须先准备好数据，也就是Dataset。我们可以自定义一个MyDataset类，继承Dataset类（这里注意重写_getitem_()和_Len_()两个函数），也可以通过torchvision.datasets中的现成的数据集，还可以使用pytorch中的TensorDataset类来封装，需要知道的是后两种方法所生成的数据集也都是继承与Dataset类。<br> DataLoader中有多个参数，几个重要的参数意义说明如下：</li></ol><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>dataset</td><td>数据源</td></tr><tr><td>batch_size</td><td>批大小,每次训练的样本数</td></tr><tr><td>shuffle</td><td>设置为True则表示每次epoch将data打乱顺序</td></tr><tr><td>sampler</td><td>自定义从数据集中取数据，一旦指定，shuffle必须为False</td></tr><tr><td>num_workers</td><td>决定了由几个进程来处理数据加载过程</td></tr><tr><td>drop_last</td><td>当样本数量不能整除时，是否舍弃最后一批数据</td></tr></tbody></table><ol start="2"><li><h3 id="DataLoader的使用"><a href="#DataLoader的使用" class="headerlink" title="DataLoader的使用"></a>DataLoader的使用</h3></li></ol><p>首先生成数据集,我们自定义一个数据类,实现其中的方法如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RMBDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data_dir<span class="token punctuation">,</span> transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        rmb面额分类任务的Dataset        :param data_dir: str, 数据集所在路径        :param transform: torch.transform，数据预处理        """</span>        self<span class="token punctuation">.</span>label_name <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"1"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>data_info <span class="token operator">=</span> self<span class="token punctuation">.</span>get_img_info<span class="token punctuation">(</span>data_dir<span class="token punctuation">)</span>  <span class="token comment"># data_info存储所有图片路径和标签，在DataLoader中通过index读取样本</span>        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        path_img<span class="token punctuation">,</span> label <span class="token operator">=</span> self<span class="token punctuation">.</span>data_info<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>path_img<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>     <span class="token comment"># 0~255</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transform <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            img <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>img<span class="token punctuation">)</span>   <span class="token comment"># 在这里做transform，转为tensor等等</span>                    <span class="token keyword">return</span> img<span class="token punctuation">,</span> label    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_info<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">get_img_info</span><span class="token punctuation">(</span>data_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        data_info <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> _ <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>data_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 遍历类别</span>            <span class="token keyword">for</span> sub_dir <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>                img_names <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> sub_dir<span class="token punctuation">)</span><span class="token punctuation">)</span>                img_names <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> img_names<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># 遍历图片</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>img_names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    img_name <span class="token operator">=</span> img_names<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    path_img <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> sub_dir<span class="token punctuation">,</span> img_name<span class="token punctuation">)</span>                    label <span class="token operator">=</span> rmb_label<span class="token punctuation">[</span>sub_dir<span class="token punctuation">]</span>                    data_info<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>path_img<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data_info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要想搞清楚这个类是如何加载数据的,要从这个类的实例化开始看起:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_data <span class="token operator">=</span> RMBDataset<span class="token punctuation">(</span>data_dir<span class="token operator">=</span>train_dir<span class="token punctuation">,</span> transform<span class="token operator">=</span>train_transform<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们传入的是文件路径和transform(这个后面会具体介绍),传入这两个参数后,该类就会自动执行初始化,调用get_img_info函数,根据代码我们可以发现该函数就是通过文件路径获取到一个链表,链表元素存放的是图片文件路径和标签,将得到的数据self.data_info中.<br><strong>关于__getitem__函数的作用：</strong>使得支持dataset[i]能够返回第i个数据样本这样的下标操作，在__getitem__()函数中完成图片的读取工作可以减小内存开销，只要在需要用到的时候才将图片读入。</p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataLoader类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/Daffofily.github.io/2022/10/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/Daffofily.github.io/2022/10/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ol><li><p>含义：正则表达式本质上就是字符串，它是通过规定的特殊字符来代替我们平时的复杂的字符串，我们可以用它来进行查找、替换等操作，在效率上有很大的提高。</p></li><li><p>常用的正则表达式操作符</p><table><thead><tr><th align="left">操作符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td align="left">.</td><td>表示任何单个字符</td><td></td></tr><tr><td align="left">[ ]</td><td>字符集,对单个字符给出取值范围</td><td>[abc]表示a、b、c, [a-z]表示a到z单个字符</td></tr><tr><td align="left">[^ ]</td><td>非字符集，对单个字符给出排除范围</td><td>[^abc]表示非a非b非c的单个字符</td></tr><tr><td align="left">*</td><td>前一个字符一个或无限次扩展</td><td>abc*表示ab、abc、abcc等</td></tr><tr><td align="left">+</td><td>前一个字符一次或无限次的扩展</td><td>abc+表示abc、abcc、abccc等</td></tr><tr><td align="left">?</td><td>前一个字符零次或一次扩展</td><td>abc表示ab、abc</td></tr><tr><td align="left">|</td><td>左右表达式任意一个</td><td>abc|def表示abc或edf</td></tr><tr><td align="left">{m}</td><td>扩展前一个字符m次</td><td>ab{2}c表示abbc</td></tr><tr><td align="left">{m, n}</td><td>扩展前一个字符m至n次</td><td>ab{1,2}c表示abc、abbc</td></tr><tr><td align="left">^</td><td>匹配字符串开头</td><td>^abc表示abc在一个字符串的开头</td></tr><tr><td align="left">$</td><td>匹配字符串结尾</td><td>abc$表示abc在一个字符串的结尾</td></tr><tr><td align="left">()</td><td>分组标记，内部只能使用</td><td>操作符</td></tr><tr><td align="left">\d</td><td>数字表示，[0-9]</td><td></td></tr><tr><td align="left">\w</td><td>单词字符，[A-Za-z0-9_ ]</td><td></td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> coding小技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
